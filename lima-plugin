#!/usr/bin/env bash
#
# XBar menu plugin for lima
#
# Copyright 2021, Joe Block <jpb@unixorn.net>
#
# <xbar.title>Lima Control</xbar.title>
# <xbar.version>v1.0</xbar.version>
# <xbar.author>Joe Block</xbar.author>
# <xbar.author.github>unixorn</xbar.author.github>
# <xbar.desc>Control Lima VM</xbar.desc>
# <xbar.dependencies>Lima</xbar.dependencies>
# <xbar.image>https://raw.githubusercontent.com/unixorn/lima-xbar-plugin/main/pix/limactl-screen-shot.png</xbar.image>
#
# Dependencies: 
#   lima - https://github.com/lima-vm/lima
#   jq - https://stedolan.github.io/jq/

# Running VM color (default green)
RUNNING_VM_COLOR="#29cc00"

# Stopped VM color (default red)
STOPPED_VM_COLOR="#ff0033"

set -o pipefail
if [[ -n "$DEBUG" ]]; then
  set -x
fi

function cleanup() {
  if [[ -d "$SCRATCH_D" ]]; then
    rm -fr "$SCRATCH_D"
  fi
}

function debug() {
  if [[ -n "$DEBUG" ]]; then
    echo "$@"
  fi
}

function fail() {
  printf '%s\n' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
  exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
}

function has() {
  # Check if a command is in $PATH
  which "$@" > /dev/null 2>&1
}

# Set up a working scratch directory
SCRATCH_D=$(mktemp -d)

if [[ ! "$SCRATCH_D" || ! -d "$SCRATCH_D" ]]; then
  echo "Could not create temp dir"
  exit 1
fi

trap cleanup EXIT

export PATH="$PATH:/usr/local/bin"
XBAR_PLUGIN="$0"

logger -t 'limamenu' "RUNNING_VM_COLOR=$RUNNING_VM_COLOR"
logger -t 'limamenu' "STOPPED_VM_COLOR=$STOPPED_VM_COLOR"
logger -t 'limamenu' "XBAR_PLUGIN=$XBAR_PLUGIN"

# shellcheck disable=SC2059
function warnIfMissingDependencies() {
  local depsOK=1
  local warnings=""
  if ! has limactl; then
    warnings=$(printf "${warnings}limactl is not in your PATH! - click to get started | color=$STOPPED_VM_COLOR href=https://github.com/lima-vm/lima#getting-started\n")
    depsOK=0
  fi
  if ! has jq; then
    warnings=$(printf "${warnings}\njq is not in your PATH! - click for installation instructions | color=$STOPPED_VM_COLOR href=https://stedolan.github.io/jq/download/\n")
    depsOK=0
  fi
  if [[ depsOK -eq 0 ]]; then
    echo "üêã ‚õî | color=$STOPPED_VM_COLOR"
    echo '---'
    echo "$warnings"
    exit 0
  fi
}

function printMenuBarIcon() {
  # Bar title
  local limaStatus
  local menuBarIcon
  menuBarIcon="üêã ‚õî | color=$STOPPED_VM_COLOR"

  for vm in $(limactl list --json | jq -r '.status')
  do
    if [[ "$vm" == 'Running' ]]; then
      menuBarIcon="üêã üèÉ | color=$RUNNING_VM_COLOR"
    fi
  done
  echo "$menuBarIcon"
  echo '---'
}

function printMenu() {
  warnIfMissingDependencies

  printMenuBarIcon

  local name
  local vmstatus

  for raw in $(limactl list --json)
  do
    name=$(echo $raw | jq -r '.name' )
    vmstatus=$(echo $raw | jq -r '.status')
    if [[ $vmstatus == 'Running' ]]; then
      menuItem="$name VM is running - ‚õî | color=$RUNNING_VM_COLOR | bash=$XBAR_PLUGIN param1=stop param2=$name terminal=false refresh=true"
    else
      menuItem="$name VM is stopped - ‚ñ∂Ô∏è | color=$STOPPED_VM_COLOR | bash=$XBAR_PLUGIN param1=start param2=$name terminal=false refresh=true"
    fi
    echo $menuItem
  done

  echo "force rescan | bash=limactl param1=list terminal=false refresh=true"
  echo "Lima home | href=https://github.com/lima-vm/lima"
  limactl --version
}

function processMenuCommand() {
  case "$1" in
    start)
      logger -t 'limamenu' "Starting $2"
      limactl start "$2"
    ;;
    stop)
      logger -t 'limamenu' "Stopping $2"
      limactl stop "$2"
    ;;
  esac
}

printMenu
processMenuCommand "$@"