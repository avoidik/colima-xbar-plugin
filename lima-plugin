#!/usr/bin/env bash
#
# XBar menu plugin for lima
#
# Copyright 2021, Joe Block <jpb@unixorn.net>
#
# <xbar.title>Lima Control</xbar.title>
# <xbar.version>v1.0</xbar.version>
# <xbar.author>Joe Block</xbar.author>
# <xbar.author.github>unixorn</xbar.author.github>
# <xbar.desc>Control Lima VM</xbar.desc>
# <xbar.dependencies>jq,lima</xbar.dependencies>
# <xbar.image>https://raw.githubusercontent.com/unixorn/lima-xbar-plugin/main/pix/limactl-screen-shot.png</xbar.image>
# <xbar.abouturl>https://github.com/unixorn/lima-xbar-plugin/</xbar.abouturl>
#
# Dependencies: 
#   lima - https://github.com/lima-vm/lima
#   jq - https://stedolan.github.io/jq/

# Running VM color (default green)
RUNNING_VM_COLOR="#29cc00"

# Stopped VM color (default red)
STOPPED_VM_COLOR="#ff0033"

set -o pipefail
if [[ -n "$DEBUG" ]]; then
  set -x
fi

function cleanup() {
  if [[ -d "$SCRATCH_D" ]]; then
    rm -fr "$SCRATCH_D"
  fi
}

function debug() {
  if [[ -n "$DEBUG" ]]; then
    echo "$@"
  fi
}

function fail() {
  printf '%s\n' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
  exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
}

function has() {
  # Check if a command is in $PATH
  which "$@" > /dev/null 2>&1
}

function displayAlert() {
  alertCommand="display alert \"$1\" message \"$2\""
  osascript -e "$alertCommand"
}

function displayNotification() {
  if [[ $# -eq 1 ]]; then
    message_command="display notification \"$1\""
    osascript -e "$message_command"
  fi

  if [[ $# -eq 2 ]]; then
    message_command="display notification \"$2\" with title \"$1\""
    osascript -e "$message_command"
  fi

  if [[ $# -eq 3 ]]; then
    message_command="display notification \"$3\" with title \"$1\" subtitle \"$2\""
    echo "message_command: $message_command"
    osascript -e "$message_command"
  fi

  if [[ $# -eq 4 ]]; then
    message_command="display notification \"$4\" with title  \"$1\" subtitle \"$2\" sound name \"$3\""
    osascript -e "$message_command"
  fi
}

# Set up a working scratch directory
SCRATCH_D=$(mktemp -d)

if [[ ! "$SCRATCH_D" || ! -d "$SCRATCH_D" ]]; then
  echo "Could not create temp dir"
  exit 1
fi

trap cleanup EXIT

export PATH="$PATH:/usr/local/bin"
XBAR_PLUGIN="$0"

# shellcheck disable=SC2059
function warnIfMissingDependencies() {
  local depsOK=1
  local warnings=""
  if ! has jq; then
    warnings=$(printf "${warnings}\njq is not in your PATH! - click for installation instructions | color=$STOPPED_VM_COLOR href=https://stedolan.github.io/jq/download/\n")
    depsOK=0
  fi
  if ! has lima; then
    warnings=$(printf "${warnings}lima is not in your PATH! - click to get started | color=$STOPPED_VM_COLOR href=https://github.com/lima-vm/lima#getting-started\n")
    depsOK=0
  fi
  if ! has limactl; then
    warnings=$(printf "${warnings}limactl is not in your PATH! - click to get started | color=$STOPPED_VM_COLOR href=https://github.com/lima-vm/lima#getting-started\n")
    depsOK=0
  fi
  if ! has osascript; then
    warnings=$(printf "${warnings}osascript is not in your PATH! - click to get started | color=$STOPPED_VM_COLOR\n")
    depsOK=0
  fi
  if [[ depsOK -eq 0 ]]; then
    echo "üêã ‚õî | color=$STOPPED_VM_COLOR"
    echo '---'
    echo "$warnings"
    exit 0
  fi
}

function printMenuBarIcon() {
  # Bar title
  local menuBarIcon
  menuBarIcon="üêã ‚õî | color=$STOPPED_VM_COLOR"

  for vm in $(limactl list --json | jq -r '.status')
  do
    if [[ "$vm" == 'Running' ]]; then
      menuBarIcon="üêã üèÉ | color=$RUNNING_VM_COLOR"
    fi
  done
  echo "$menuBarIcon"
  echo '---'
}

# shellcheck disable=SC2059
function printMenu() {
  warnIfMissingDependencies

  printMenuBarIcon

  local name
  local vmstatus

  for raw in $(limactl list --json)
  do
    name=$(echo "$raw"| jq -r '.name' )
    vmstatus=$(echo "$raw" | jq -r '.status')
    if [[ $vmstatus == 'Running' ]]; then
      echo "$name VM is running | color=$RUNNING_VM_COLOR"
      echo "--‚õî Stop $name VM | bash=$XBAR_PLUGIN param1=stop param2=$name terminal=false refresh=true"
      echo "-- Images"
      for image in $(vmImages)
      do
        echo "----$image"
        echo "------ pull | bash=$XBAR_PLUGIN param1=pull param2=$name param3=$image terminal=false refresh=true"
        echo "------ rm | bash=$XBAR_PLUGIN param1=rmImage param2=$name param3=$image terminal=false refresh=true"
      done
    else
      echo "$name VM is stopped | color=$STOPPED_VM_COLOR"
      echo "--‚ñ∂Ô∏è Start $name VM | bash=$XBAR_PLUGIN param1=start param2=$name terminal=false refresh=true"
    fi
  done

  echo "force rescan | bash=limactl param1=list terminal=false refresh=true"
  echo "Lima home | href=https://github.com/lima-vm/lima"
  limactl --version
}

function vmImages() {
  # default VM doesn't need to be specified
  if [[ "$VM" != 'default' ]]; then
    export LIMA_INSTANCE="$VM"
  fi
  # shellcheck disable=SC2001,SC2046,2005
  imageList="[$(echo $(lima nerdctl images --format '{{json .}},') | sed 's/,$//')]"
  # Can have spaces in our data, deal by using base64 (ugly)
  for row in $(echo "${imageList}" | jq -r '.[] | @base64'); do
    _jq() {
      echo "${row}" | base64 --decode | jq -r "${1}"
    }
   echo "$(_jq '.Repository'):$(_jq '.Tag')"
  done
}

function pullImage() {
  # arg1 = image
  # arg2 = VM
  local imageName
  local VM
  imageName="$1"
  VM="$2"
  if [[ "$VM" != 'default' ]]; then
    export LIMA_INSTANCE="$VM"
  fi
  displayNotification lima "Pulling ${imageName}..."
  if lima nerdctl image pull "$imageName"; then
    displayNotification Lima "Pulled $imageName"
  else
    displayAlert Lima "Failed to pull $imageName"
  fi
}

function rmImage() {
  # arg1 = image
  # arg2 = VM
  local imageName
  local VM
  imageName="$1"
  VM="$2"
  if [[ "$VM" != 'default' ]]; then
    export LIMA_INSTANCE="$VM"
  fi
  lima nerdctl image rm "$imageName"
}

function processMenuCommand() {
  case "$1" in
    images)
      vmImages "$2"
    ;;
    pull)
      pullImage "$2" "$3" # pull imagename vmname
    ;;
    rmImage)
      rmImage "$2" "$3" # pull imagename vmname
    ;;
    start)
      displayNotification 'Lima' "Starting $2 VM"
      if limactl start "$2"; then
        displayNotification "Lima" "Started $2 VM successfully"
      else
        displayAlert "Lima" "Failed to start $2 VM"
      fi
    ;;
    stop)
      displayNotification 'Lima' "Stopping $2 VM"
      if limactl stop "$2"; then
        displayNotification "Lima" "Stopped $2 VM successfully"
      else
        displayAlert "Lima" "Failed to stop $2 VM"
      fi
    ;;
  esac
}

printMenu
processMenuCommand "$@"